/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hw
 */
public final class Customer_FoodOrderDetail extends javax.swing.JFrame {
    private String user;
    String orderedFile = ("FoodOrderDetail.txt");
    String creditFile=("customer.txt");
    String transactionFile=("CustomerTransaction.txt");
    String savenotificationFile=("ordersNotifications.txt");
    
    File of= new File(orderedFile);
    File cof=new File(creditFile);
    File tof=new File(transactionFile);
    File ntof=new File(savenotificationFile);

    /**
     * Creates new form Customer_FoodOrderDetail
     */
    public Customer_FoodOrderDetail(String user) {
        setTitle("Food Order Summary");
        this.user=user;
        initComponents();
        try {
            OrderedData();  
        } catch (IOException ex) {
            Logger.getLogger(Customer_FoodOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

    public void OrderedData() throws FileNotFoundException, IOException{
        FileReader fr=new FileReader(of);
        FileReader cfr=new FileReader(cof);
        
        try (BufferedReader br = new BufferedReader(fr)) {
            DefaultTableModel ordermodel = (DefaultTableModel)TBLOrderDetail.getModel();
            ordermodel.setRowCount(0);
 
            String ordereddataline;
            double deliveryprice=2;
            double newtotalPrice;
            double totalPrice=0.0;
            
            while ((ordereddataline = br.readLine()) != null) {
                String[] orderpart = ordereddataline.split(":");
                if (orderpart.length == 7) {
                    String foodCode = orderpart[1];
                    String Name = orderpart[2];
                    String quantity = orderpart[3];
                    String price = orderpart[4];
                    String ordermethod=orderpart[5];
                    String shop=orderpart[6];

                    price = price.replaceAll("[^0-9.]", "");
                    double newprice = Double.parseDouble(price);
                    double priceValue= Double.parseDouble(price);
                    totalPrice += priceValue;
                    
                    ordermodel.addRow(new Object[]{foodCode, Name,quantity, "RM"+newprice});
                    lblOrderMethod.setText(ordermethod);
                    lblShop.setText(shop);
                } 
            }
            br.close();
            
            if (lblOrderMethod.getText().equals("DELIVERY")){
                lblDeliveryFee.setText("RM"+String.format("%.2f", 2.00));  
            }else{
                lblDeliveryFee.setText("RM"+String.valueOf(0));
            }
            
            if (lblOrderMethod.getText().equals("DELIVERY")){
                newtotalPrice=totalPrice+deliveryprice;
                lblTotal.setText("RM"+String.format("%.2f",newtotalPrice));
            }
            else{
                lblTotal.setText("RM"+String.format("%.2f",totalPrice));
            }    
        }
        CurrentDate obj = new CurrentDate();
        String date = obj.getdate();        
        lblDate.setText(date);
        
        BufferedReader cbr = new BufferedReader(cfr);
        String creditline; 
        while((creditline = cbr.readLine())!=null){
            String[] orderpart = creditline.split(":");
            if (orderpart.length == 3 && user.equals(orderpart[0])) {
                String credit = orderpart[2];
                lblCurrent_CA.setText("RM"+credit);
            }
        }
        cbr.close();
        cfr.close();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbOrderDetail = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        TBLOrderDetail = new javax.swing.JTable();
        lbDF = new javax.swing.JLabel();
        lblDeliveryFee = new javax.swing.JLabel();
        lbOM = new javax.swing.JLabel();
        lblCurrent_CA = new javax.swing.JLabel();
        lbDate = new javax.swing.JLabel();
        lblOrderMethod = new javax.swing.JLabel();
        lbCCA = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        btnPay = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lbTT1 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblShop = new javax.swing.JLabel();
        lbDF1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(675, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(650, 500));

        lbOrderDetail.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbOrderDetail.setText("ORDER DETAIL");

        TBLOrderDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FOOD CODE", "NAME", "QUANTITY", "PRICE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBLOrderDetail.setRowHeight(30);
        jScrollPane8.setViewportView(TBLOrderDetail);
        if (TBLOrderDetail.getColumnModel().getColumnCount() > 0) {
            TBLOrderDetail.getColumnModel().getColumn(0).setMinWidth(140);
            TBLOrderDetail.getColumnModel().getColumn(0).setMaxWidth(140);
            TBLOrderDetail.getColumnModel().getColumn(2).setMinWidth(140);
            TBLOrderDetail.getColumnModel().getColumn(2).setMaxWidth(140);
            TBLOrderDetail.getColumnModel().getColumn(3).setMinWidth(140);
            TBLOrderDetail.getColumnModel().getColumn(3).setMaxWidth(140);
        }

        lbDF.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbDF.setText("Selected Shop:");

        lblDeliveryFee.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDeliveryFee.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbOM.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbOM.setText("Order Method:");

        lblCurrent_CA.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblCurrent_CA.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbDate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbDate.setText("Date:");

        lblOrderMethod.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblOrderMethod.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbCCA.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbCCA.setText("Current Credit Amount:\n");

        lblTotal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnPay.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnPay.setText("Place Order");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lbTT1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbTT1.setText("Total:");

        lblDate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDate.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblShop.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblShop.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbDF1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbDF1.setText("Delivery Fee:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbOrderDetail)
                .addGap(253, 253, 253))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lbOM, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(56, 56, 56))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbCCA, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbDF1))
                                        .addGap(4, 4, 4)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblCurrent_CA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDeliveryFee, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblOrderMethod, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lbDF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblShop, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTT1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(btnCancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPay))))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbOrderDetail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbCCA)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCurrent_CA, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbOM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblOrderMethod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbTT1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDeliveryFee, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnCancel)
                                .addComponent(btnPay)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblShop, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbDF1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbDF)
                        .addGap(23, 23, 23))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int cancelConfirmation = JOptionPane.showConfirmDialog(this,"Do you want give up the order?", "Confirm Cancel", JOptionPane.YES_NO_OPTION);
        
        if(cancelConfirmation == JOptionPane.YES_OPTION){
            try {
                FileWriter fw = new FileWriter(of);
                BufferedWriter reset = new BufferedWriter(fw); 
                reset.write("");
                reset.close();
                
                Customer_FoodOrder FO = new Customer_FoodOrder(user);
                FO.show();
                dispose();
            } catch (IOException ex) {
                Logger.getLogger(Customer_FoodOrderDetail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        int confirmorder = JOptionPane.showConfirmDialog(this,"Do you want to confirm order?", "Order Confirmation",JOptionPane.YES_NO_OPTION);

        if (confirmorder==JOptionPane.YES_OPTION){
            try (BufferedReader cbr = new BufferedReader(new FileReader(cof));
                 BufferedWriter cbw = new BufferedWriter(new FileWriter(cof,  true))) {

                    String getorderMethod = lblOrderMethod.getText();
                    
                    String totalText = lblTotal.getText();
                    totalText = totalText.replaceAll("[^0-9.]", ""); 
                    double total = Double.parseDouble(totalText);
                    
                    String shop = lblShop.getText(); 
                    
                    String creditText = lblCurrent_CA.getText();
                    String formattedCredit = creditText.replaceAll("[^0-9.]", ""); 
                    double getcredit = Double.parseDouble(formattedCredit);
                    if (getcredit > total) {
                        double newcredit = (double) (getcredit - total);

                    try {
                        String statusFile = ("Order"+shop+".txt");
                        String orderStatusFile=("OrderStatus.txt");
                        FileWriter fw = new FileWriter(statusFile, true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        
                        FileWriter ofw = new FileWriter(orderStatusFile, true);
                        BufferedWriter obw = new BufferedWriter(ofw); 

                        String date = lblDate.getText();
                        String selectshop=lblShop.getText();
                        
 
                        double deliveryFee = lblOrderMethod.getText().equals("DELIVERY") ? 2.00 : 0.00;
                        String deliveryfee = String.format("%.2f", deliveryFee);

                        double totalPrice = 0.0;
                        updatecredit(newcredit);

                        String row = "";
                        String notirow = "";
                        String pricerow = "";

                        for (int i = 0; i < TBLOrderDetail.getRowCount(); i++) {
                            String FoodCode = TBLOrderDetail.getValueAt(i, 0).toString();
                            String Order = TBLOrderDetail.getValueAt(i, 1).toString();
                            String Quantity = TBLOrderDetail.getValueAt(i, 2).toString();
                            String price = TBLOrderDetail.getValueAt(i, 3).toString();

                            price = price.replaceAll("[^0-9.]", "");
                            double formatted_price = Double.parseDouble(price);

                            double itemTotal = Double.parseDouble(Quantity) * formatted_price;
                            totalPrice += itemTotal;

                            row += FoodCode + ", " + Order + ", " + Quantity + ", " + formatted_price;
                            row += " | ";

                            notirow += Order + ",";
                            pricerow += formatted_price + ",";
                        }
                        notirow = notirow.substring(0, notirow.length() - 1);
                        pricerow =pricerow.substring(0, pricerow.length() - 1);


                        String orderID = OrderIdGenerator.generateOrderId();
                        String status="PENDING";
                        String runnercode="DR001";
                        
                        row = user+":"+date + ":" + orderID + ":"+selectshop+ ":" + row + ""+":"+ getorderMethod + ":" + deliveryfee + ":" + String.format("%.2f", totalPrice)+ ":" + status;
                        
                        bw.write(row);
                        bw.newLine();
                        
                        obw.write(row);
                        obw.newLine();
                        
                        savetransaction(date, orderID, selectshop, "-RM"+total);
                        
                        FileWriter nfw=new FileWriter(ntof,true);
                        BufferedWriter bfw= new BufferedWriter(nfw);
                        
                        notirow=user + ":" + notirow + ":" + pricerow + ":" + selectshop + ":" + String.format("%.2f", totalPrice) + ":" + date;
                        
                        bfw.write(notirow);
                        bfw.newLine();
                        bfw.flush();
                        
                        JOptionPane.showMessageDialog(this, "Order successfully processed!", "Order Confirmation", JOptionPane.INFORMATION_MESSAGE);
                        bw.close();
                        obw.close();

                        Customer_OrderStatus_History osh = new Customer_OrderStatus_History(user);
                        osh.show();
                        this.dispose();
                        
                    }
                    catch (IOException ex) {
                    Logger.getLogger(Customer_FoodOrderDetail.class.getName()).log(Level.SEVERE, null, ex);
                    }
                FileWriter finishfw = new FileWriter(of, false);
                BufferedWriter finishbw = new BufferedWriter(finishfw);
                finishbw.write("");
                finishbw.flush();
                }
                else{
                   JOptionPane.showMessageDialog(this, "Not Enough Credit!", "Credit Invalid", JOptionPane.WARNING_MESSAGE); 
                }
            } 
            catch (IOException | NumberFormatException ex) {
                ex.printStackTrace();
            }   
        }
    }//GEN-LAST:event_btnPayActionPerformed

    private void updatecredit(double newCredit){
        try (BufferedReader creditReader = new BufferedReader(new FileReader(cof))) {
            String line;
            StringBuilder updatedFileContent = new StringBuilder();
            while ((line = creditReader.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts.length == 3) {
                    String storedUsername = parts[0].trim();
                    String storedPassword = parts[1].trim();
                    String storedCredit = parts[2].trim();

                    if (storedUsername.equals(user)) {
                        storedCredit = Double.toString(newCredit);
                    }

                    line = storedUsername + ":" + storedPassword + ":" + storedCredit;
                }
                updatedFileContent.append(line).append("\n");
            }

            try (BufferedWriter creditWriter = new BufferedWriter(new FileWriter(creditFile))) {
                creditWriter.write(updatedFileContent.toString());
            }
        } catch (IOException e) {
            e.printStackTrace(); 
        }
    }
    
    private void savetransaction(String date, String orderID, String vendor, String totalPrice) {
        try (
            FileWriter tfw = new FileWriter(tof, true);
            BufferedWriter bfw = new BufferedWriter(tfw);
        ) {
            String transactionDetails = user+":"+date + ":" +"FOOD ORDER"+ ":" + totalPrice;
            bfw.write(transactionDetails);
            bfw.newLine();
        } catch (IOException e) {
            e.printStackTrace(); 
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TBLOrderDetail;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnPay;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lbCCA;
    private javax.swing.JLabel lbDF;
    private javax.swing.JLabel lbDF1;
    private javax.swing.JLabel lbDate;
    private javax.swing.JLabel lbOM;
    private javax.swing.JLabel lbOrderDetail;
    private javax.swing.JLabel lbTT1;
    private javax.swing.JLabel lblCurrent_CA;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDeliveryFee;
    private javax.swing.JLabel lblOrderMethod;
    private javax.swing.JLabel lblShop;
    private javax.swing.JLabel lblTotal;
    // End of variables declaration//GEN-END:variables
}
