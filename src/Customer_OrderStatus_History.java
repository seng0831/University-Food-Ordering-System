/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hw
 */
public class Customer_OrderStatus_History extends javax.swing.JFrame {
    private String user;
    String orderstatusFile = ("OrderStatus.txt");
    String orderHistoryFile=("OrderHistory.txt");
    String orderreviewFile=("OrderReview.txt");
    String reorderFile=("FoodOrderDetail.txt");
    String creditFile=("customer.txt");
    String transactionFile=("CustomerTransaction.txt");
    File of= new File(orderstatusFile);
    File hof = new File(orderHistoryFile);
    File rof=new File(orderreviewFile);
    File rdof=new File(reorderFile);
    File cfc=new File(creditFile);
    File tfc=new File(transactionFile);
    
    CurrentDate obj = new CurrentDate();
    String date = obj.getdate();
    /**
     * Creates new form Customer_OrderStatus
     */
    public Customer_OrderStatus_History(String user) {
        try {
            setTitle("Order Status and History");
            initComponents();
            this.user=user;
            OrderStatusData();
            updateForUnavailable();
            OrderHistory(orderHistoryFile);
        } catch (IOException ex) {
            Logger.getLogger(Customer_OrderStatus_History.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancelOrder1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TBLDetail = new javax.swing.JTable();
        txReview = new java.awt.TextField();
        lbOrderStatus = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        TBLOrderStatus = new javax.swing.JTable();
        btnViewDetail = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lbOrderStatus1 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        TBLOrderHistory = new javax.swing.JTable();
        btnReorder = new javax.swing.JButton();
        btnReview = new javax.swing.JButton();
        btnCancelOrder = new javax.swing.JButton();

        btnCancelOrder1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancelOrder1.setText("Cancel Order");

        TBLDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Food Code", "Name", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBLDetail.setMaximumSize(new java.awt.Dimension(80, 80));
        TBLDetail.setMinimumSize(new java.awt.Dimension(80, 80));
        jScrollPane2.setViewportView(TBLDetail);
        if (TBLDetail.getColumnModel().getColumnCount() > 0) {
            TBLDetail.getColumnModel().getColumn(0).setMinWidth(80);
            TBLDetail.getColumnModel().getColumn(0).setMaxWidth(80);
            TBLDetail.getColumnModel().getColumn(2).setMinWidth(80);
            TBLDetail.getColumnModel().getColumn(2).setMaxWidth(80);
            TBLDetail.getColumnModel().getColumn(3).setMinWidth(80);
            TBLDetail.getColumnModel().getColumn(3).setMaxWidth(80);
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(650, 500));

        lbOrderStatus.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbOrderStatus.setText("ORDER HISTORY");

        TBLOrderStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATE", "ORDER ID", "VENDOR", "ORDER METHOD", "DELIVERY FEE", "TOTAL", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBLOrderStatus.setRowHeight(30);
        jScrollPane8.setViewportView(TBLOrderStatus);
        if (TBLOrderStatus.getColumnModel().getColumnCount() > 0) {
            TBLOrderStatus.getColumnModel().getColumn(0).setMinWidth(80);
            TBLOrderStatus.getColumnModel().getColumn(0).setMaxWidth(80);
            TBLOrderStatus.getColumnModel().getColumn(1).setMinWidth(80);
            TBLOrderStatus.getColumnModel().getColumn(1).setMaxWidth(80);
            TBLOrderStatus.getColumnModel().getColumn(5).setMinWidth(80);
            TBLOrderStatus.getColumnModel().getColumn(5).setMaxWidth(80);
            TBLOrderStatus.getColumnModel().getColumn(6).setMinWidth(100);
            TBLOrderStatus.getColumnModel().getColumn(6).setMaxWidth(100);
        }

        btnViewDetail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnViewDetail.setText("View Detail");
        btnViewDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lbOrderStatus1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbOrderStatus1.setText("ORDER STATUS");

        TBLOrderHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATE", "ORDER ID", "VENDOR", "ORDER METHOD", "DELIVERY FEE", "TOTAL", "STATUS", "REVIEW"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBLOrderHistory.setRowHeight(30);
        jScrollPane10.setViewportView(TBLOrderHistory);
        if (TBLOrderHistory.getColumnModel().getColumnCount() > 0) {
            TBLOrderHistory.getColumnModel().getColumn(0).setMinWidth(80);
            TBLOrderHistory.getColumnModel().getColumn(0).setMaxWidth(80);
            TBLOrderHistory.getColumnModel().getColumn(1).setMinWidth(70);
            TBLOrderHistory.getColumnModel().getColumn(1).setMaxWidth(70);
            TBLOrderHistory.getColumnModel().getColumn(2).setMinWidth(80);
            TBLOrderHistory.getColumnModel().getColumn(2).setMaxWidth(80);
            TBLOrderHistory.getColumnModel().getColumn(4).setMinWidth(110);
            TBLOrderHistory.getColumnModel().getColumn(4).setMaxWidth(110);
            TBLOrderHistory.getColumnModel().getColumn(5).setMinWidth(70);
            TBLOrderHistory.getColumnModel().getColumn(5).setMaxWidth(70);
            TBLOrderHistory.getColumnModel().getColumn(6).setMinWidth(80);
            TBLOrderHistory.getColumnModel().getColumn(6).setMaxWidth(80);
            TBLOrderHistory.getColumnModel().getColumn(7).setMinWidth(80);
            TBLOrderHistory.getColumnModel().getColumn(7).setMaxWidth(80);
        }

        btnReorder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnReorder.setText("Reorder");
        btnReorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReorderActionPerformed(evt);
            }
        });

        btnReview.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnReview.setText("Give Review");
        btnReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReviewActionPerformed(evt);
            }
        });

        btnCancelOrder.setText("Cancel Order");
        btnCancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnViewDetail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancelOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lbOrderStatus)
                                .addGap(236, 236, 236))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnReview)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnReorder, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                        .addGap(12, 12, 12))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(312, Short.MAX_VALUE)
                    .addComponent(lbOrderStatus1)
                    .addGap(245, 245, 245)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnViewDetail)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancelOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1)))
                .addGap(12, 12, 12)
                .addComponent(lbOrderStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReview)
                    .addComponent(btnReorder))
                .addContainerGap(10, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(lbOrderStatus1)
                    .addContainerGap(511, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Customer_Homepage home = new Customer_Homepage(user);
        home.show();
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailActionPerformed
    int selectedRow = TBLOrderStatus.getSelectedRow();
    
    if (selectedRow != -1) { 
        try (FileReader fr = new FileReader(of);
             BufferedReader br = new BufferedReader(fr)) {

            String selectedOrderID = TBLOrderStatus.getValueAt(selectedRow, 1).toString(); 
            DefaultTableModel detailModel = (DefaultTableModel) TBLDetail.getModel();
            detailModel.setRowCount(0);

            String orderLine;
            while ((orderLine = br.readLine()) != null) {
                String[] orderParts = orderLine.split(":");
                if (orderParts.length >= 8 && selectedOrderID.equals(orderParts[2])) {
                    String foodDetails = orderParts[4].trim(); 

                    String[] foodItems = foodDetails.split("\\|");

                    for (String foodItem : foodItems) {
                         String[] foodInfo = foodItem.trim().split(", ");
                        if (foodInfo.length == 4) {
                            String foodCode = foodInfo[0];
                            String name = foodInfo[1];
                            String quantity = foodInfo[2];
                            String price = foodInfo[3];

                            detailModel.addRow(new Object[]{foodCode, name, quantity, price});      
                        }
                    }
                    int width = 450;
                    int height = 150;

                    JScrollPane scrollPane = new JScrollPane(TBLDetail);

                    scrollPane.setPreferredSize(new Dimension(width, height));
                    JOptionPane.showMessageDialog(null, scrollPane, "Selected Order Detail", JOptionPane.INFORMATION_MESSAGE);
                    break; 
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Customer_OrderStatus_History.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select an order to view details.", "No order Selected", JOptionPane.WARNING_MESSAGE);
    }

    }//GEN-LAST:event_btnViewDetailActionPerformed

        
    private void btnReorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReorderActionPerformed
    int reorder = JOptionPane.showConfirmDialog(this, "Do you want to reorder?", "Reorder Confirmation", JOptionPane.YES_NO_OPTION);

    if (reorder == JOptionPane.YES_OPTION) {
        int selectedRow = TBLOrderHistory.getSelectedRow();

        if (selectedRow != -1) {
            String orderID = TBLOrderHistory.getValueAt(selectedRow, 1).toString();

            try (FileReader fr = new FileReader(hof);
                 BufferedReader br = new BufferedReader(fr);
                 FileWriter wfr = new FileWriter(rdof, true); 
                 BufferedWriter wbr = new BufferedWriter(wfr)) {

                String orderLine;
                while ((orderLine = br.readLine()) != null) {
                    String[] orderParts = orderLine.split(":");
                    if (orderParts.length >= 8 && orderID.equals(orderParts[2])) {
                        String orderMethod = orderParts[5];
                        String vendor = orderParts[3];

                        String[] items = orderParts[4].split("\\|");

                        for (String item : items) {
                            String[] itemParts = item.trim().split(",");
                            if (itemParts.length >= 4) {
                                String foodcode = itemParts[0].trim();
                                String itemName = itemParts[1].trim();
                                String quantity = itemParts[2].trim();
                                String price = itemParts[3].trim();

                                wbr.write(orderParts[0] + ":" + foodcode + ":" + itemName + ":" + quantity + ": RM" + price + ":" + orderMethod + ":" + vendor);
                                wbr.newLine();
                            }
                        }
                    }
                }
                
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            Customer_FoodOrderDetail fd = new Customer_FoodOrderDetail(user);
            fd.show();
            this.dispose();
        }
    }
    }//GEN-LAST:event_btnReorderActionPerformed

    private void btnReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReviewActionPerformed
         int selectedRow = TBLOrderHistory.getSelectedRow();
        if (selectedRow != -1) {
            String method = TBLOrderHistory.getValueAt(selectedRow, 3).toString();
            String currentReview = TBLOrderHistory.getValueAt(selectedRow, 7).toString();
            String status = TBLOrderHistory.getValueAt(selectedRow, 6).toString();
            if (!"SUBMITTED".equals(currentReview)) {
                if (("APPROVED".equals(status)) || ("DELIVERED".equals(status))) {
                    String date = TBLOrderHistory.getValueAt(selectedRow, 0).toString();
                    String orderID = TBLOrderHistory.getValueAt(selectedRow, 1).toString();
                    String vendor = TBLOrderHistory.getValueAt(selectedRow, 2).toString();

                    if ("DELIVERY".equals(method)) {
                        int rating = showRatingDialog();

                        try (FileReader rdelirunner = new FileReader(hof);
                             BufferedReader bdelirunner = new BufferedReader(rdelirunner)) {

                            StringBuilder updatedContent = new StringBuilder();

                            String deliline;
                            while ((deliline = bdelirunner.readLine()) != null) {
                                String[] delipart = deliline.split(":");
                                if (delipart.length >= 8 && orderID.equals(delipart[2]) && user.equals(delipart[0])) {
                                    String runnerid = delipart[10];
                                    String orderreviewFile = (runnerid + ".txt");
                                    System.out.println(orderreviewFile);
                                    File drof = new File(orderreviewFile);

                                    try (FileReader fof = new FileReader(drof);
                                         BufferedReader brofr = new BufferedReader(fof)) {

                                        String reviewline;
                                        while ((reviewline = brofr.readLine()) != null) {
                                            if (reviewline.contains(orderID) && reviewline.contains("null")) {
                                                reviewline = reviewline.replace("null", String.valueOf(rating));
                                            }
                                            updatedContent.append(reviewline).append("\n");
                                        }
                                        
                                        try (FileWriter ReviewUpdate = new FileWriter(drof);
                                            BufferedWriter historyBufferedWriterUpdate = new BufferedWriter(ReviewUpdate)) {
                                           historyBufferedWriterUpdate.write(updatedContent.toString());
                                       } catch (IOException ex) {
                                            ex.printStackTrace();
                                        }
                                    } catch (IOException ex) {
                                        ex.printStackTrace();
                                    }
                                }
                            }
                        } catch (IOException ex) {
                            ex.printStackTrace();  
                        }
                    }
                    JScrollPane Reviewbox = new JScrollPane(txReview);
                    int reviewBox = JOptionPane.showConfirmDialog(this, Reviewbox, "Provide Your Review Here", JOptionPane.OK_CANCEL_OPTION);

                    if (reviewBox == JOptionPane.OK_OPTION) {
                        String review = txReview.getText();

                        if(!review.isEmpty()){
                            try (FileWriter reviewFileWriter = new FileWriter(rof, true);
                                 BufferedWriter reviewBufferedWriter = new BufferedWriter(reviewFileWriter);
                                 FileWriter historyFileWriter = new FileWriter(hof, true);
                                 BufferedWriter historyBufferedWriter = new BufferedWriter(historyFileWriter)) {

                                reviewBufferedWriter.write(user + ":" + date + ":" + orderID + ":" + vendor + ":" + review);
                                reviewBufferedWriter.newLine();

                                JOptionPane.showMessageDialog(this, "Review submitted successfully!", "Your Review is Appreciated", JOptionPane.INFORMATION_MESSAGE);
                                DefaultTableModel refreshmodel = (DefaultTableModel) TBLOrderHistory.getModel();

                                refreshmodel.setValueAt("SUBMITTED", selectedRow, 7);

                                FileReader hfr = new FileReader(hof);
                                BufferedReader historyReader = new BufferedReader(hfr);
                                StringBuilder historyContent = new StringBuilder();

                                String historyLine;

                                while ((historyLine = historyReader.readLine()) != null) {
                                    if (historyLine.contains(orderID)) {
                                        historyLine = historyLine.replace("NO", "SUBMITTED");
                                    }
                                    historyContent.append(historyLine).append("\n");
                                }

                                historyReader.close();

                                try (FileWriter historyFileWriterUpdate = new FileWriter(hof);
                                     BufferedWriter historyBufferedWriterUpdate = new BufferedWriter(historyFileWriterUpdate)) {
                                     historyBufferedWriterUpdate.write(historyContent.toString());
                                }

                            } catch (IOException ex) {
                                ex.printStackTrace();
                            }
                        }
                        else{
                        JOptionPane.showMessageDialog(this, "No review inserted. Please provide a review.", "Review Not Inserted", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    
                }else{
                     JOptionPane.showMessageDialog(null, "This order is unsuccessful", "Fail to review", JOptionPane.WARNING_MESSAGE);   
                }
            } else {
                JOptionPane.showMessageDialog(null, "This order has already been reviewed and submitted.", "Review submitted", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an order to review.", "No Order Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnReviewActionPerformed

    private void btnCancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelOrderActionPerformed
    int selectedRow = TBLOrderStatus.getSelectedRow();

    if (selectedRow != -1) {
        int confirmCancel = JOptionPane.showConfirmDialog(this, "Do you want to cancel the order?", "Order Cancellation", JOptionPane.YES_NO_OPTION);

        if (confirmCancel == JOptionPane.YES_OPTION) {
            String selectedOrderID = TBLOrderStatus.getValueAt(selectedRow, 1).toString();
            String selectedOrdermethod = TBLOrderStatus.getValueAt(selectedRow, 3).toString();
            String selectedOrdertotal = TBLOrderStatus.getValueAt(selectedRow, 5).toString();
            selectedOrdertotal = selectedOrdertotal.replaceAll("[^0-9.]", ""); 
            double orderTotal = Double.parseDouble(selectedOrdertotal);
            DefaultTableModel detailModel = (DefaultTableModel) TBLOrderStatus.getModel();
            detailModel.removeRow(selectedRow);
            try (
                FileReader ffr = new FileReader(of);
                BufferedReader bbr = new BufferedReader(ffr)){
                    
                String readline;
                int currentRow = selectedRow; 

                FileWriter ofw = new FileWriter(of);
                BufferedWriter obw = new BufferedWriter(ofw);
                while ((readline = bbr.readLine()) != null) {
                    System.out.println("readline: " + readline);
                    String[] statuspart = readline.split(":");
                    if ((statuspart.length >= 8 && statuspart[2].equals(selectedOrderID))) {
                        obw.write(readline);
                        System.out.println(readline);
                        obw.newLine(); 
                    }
                }
                
                if("DELIVERY".equals(selectedOrdermethod)){
                    updatecredit(2.00,orderTotal);
                }
                
                try (FileWriter tfw = new FileWriter(tfc, true);
                    BufferedWriter bfw = new BufferedWriter(tfw)) {
                   String transactionDetails = user + ":" + date + ":" + "DELIVERY FEE REFUND" + ":" + "+RM2.00";
                   String fooddetails = user + ":" + date + ":" + "FOOD CANCELLED" + ":" + "+RM"+orderTotal;
                   bfw.write(transactionDetails);
                   bfw.newLine();
                   bfw.write(fooddetails);
                   bfw.newLine();
               } catch (IOException e) {
                   e.printStackTrace(); // Handle the exception appropriately
               }
                JOptionPane.showMessageDialog(this, "Order canceled successfully.", "Order Cancellation", JOptionPane.INFORMATION_MESSAGE);

            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select an order to cancel.", "No Order Selected", JOptionPane.WARNING_MESSAGE);
    }

    }//GEN-LAST:event_btnCancelOrderActionPerformed

    private void OrderStatusData() throws IOException{
        FileReader fr = new FileReader(of);
        BufferedReader br = new BufferedReader(fr);
        
        DefaultTableModel statusmodel= (DefaultTableModel)TBLOrderStatus.getModel();

        String statusline;
        while ((statusline = br.readLine()) != null) {
                String[] statuspart = statusline.split(":");
                if (statuspart.length >= 7 && user.equals(statuspart[0])) {
                    String date = statuspart[1];
                    String id = statuspart[2];
                    String vendor = statuspart[3];
                    String ordermethod = statuspart[5];
                    String deliveryfee = statuspart[6];
                    String total = statuspart[7];
                    String status=statuspart[8];

                    statusmodel.addRow(new Object[]{date, id,vendor,ordermethod, "RM"+deliveryfee,"RM"+total,status});
                }  
        }     
    }
    
   private void updateForUnavailable() {
    TBLOrderStatus.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            try (FileReader fr = new FileReader(of);
                 BufferedReader br = new BufferedReader(fr)) {

                DefaultTableModel statusModel = (DefaultTableModel) TBLOrderStatus.getModel();
                int selectedRow = TBLOrderStatus.getSelectedRow();

                if (selectedRow != -1) {
                    String status = TBLOrderStatus.getValueAt(selectedRow, 6).toString();
                    String id = TBLOrderStatus.getValueAt(selectedRow, 1).toString();

                    if ("UNAVAILABLE".equals(status)) {
                        int option = JOptionPane.showOptionDialog(null,
                                "Driver not available. Please choose to dine in or take away",
                                "Driver Unavailable", JOptionPane.DEFAULT_OPTION,
                                JOptionPane.QUESTION_MESSAGE, null,
                                new Object[]{"DINE IN", "TAKE AWAY"}, "DINE IN");

                        if (option == 0 || option == 1) {
                            String userChoice = (option == 0) ? "DINE IN" : "TAKE AWAY";
                            String resetStatus = "PENDING";

                            // Remove the selected row from the table
                            statusModel.removeRow(selectedRow);

                            try (FileWriter ofw = new FileWriter(of, false);
                                 BufferedWriter obw = new BufferedWriter(ofw)) {

                                String readline;
                                while ((readline = br.readLine()) != null) {
                                    String[] statuspart = readline.split(":");
                                    if (statuspart.length >= 9 && user.equals(statuspart[0]) &&
                                            id.equals(statuspart[2]) && "UNAVAILABLE".equals(statuspart[8])) {
                                        continue;
                                    }
                                    obw.write(readline);
                                    obw.newLine();
                                }
                            }
                        }
                    }
                }
            } catch (IOException ex) {
                ex.printStackTrace(); 
            }
        }
    });
 }

    
    private void OrderHistory(String hof) throws IOException{
        FileReader fr = new FileReader(hof);
        BufferedReader br = new BufferedReader(fr);

        DefaultTableModel historymodel = (DefaultTableModel) TBLOrderHistory.getModel();

        String statusline;
        while ((statusline = br.readLine()) != null) {
            String[] statuspart = statusline.split(":");
            if (statuspart.length >= 9 && user.equals(statuspart[0])) {
                String date = statuspart[1];
                String id = statuspart[2];
                String vendor = statuspart[3];
                String ordermethod = statuspart[5];
                String deliveryfee = statuspart[6];
                String total = statuspart[7];
                String status= statuspart[8];

                String statusText = getStatusFromHistoryFile(hof,id);

                historymodel.addRow(new Object[]{date, id, vendor, ordermethod, "RM" + deliveryfee, "RM" + total, status,statusText});
            }
        }
        br.close();
    }
    
    private String getStatusFromHistoryFile(String hof,String orderID) throws IOException {
        FileReader hfr = new FileReader(hof);
        BufferedReader historyReader = new BufferedReader(hfr);

        String historyLine;
        while ((historyLine = historyReader.readLine()) != null) {
            if (historyLine.contains(orderID)) {
                if (historyLine.contains("NO")) {
                    return "NO";
                } else {
                    return "SUBMITTED";
                }
            }
        }
        return "NO"; 
    }
    
    private int showRatingDialog() {
        Object[] options = {"1", "2", "3", "4", "5"};
        int response = JOptionPane.showOptionDialog(
                this,
                "Please rate your experience:",
                "Rate Vendor",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.PLAIN_MESSAGE,
                null,
                options,
                options[0]
        );

        return response + 1; 
    }
    
    private void updatecredit(double addCredit,double addtotal){
        try (BufferedReader creditReader = new BufferedReader(new FileReader(cfc))) {
            String line;
            StringBuilder updatedFileContent = new StringBuilder();
            while ((line = creditReader.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts.length == 3) {
                    String storedUsername = parts[0].trim();
                    String storedPassword = parts[1].trim();
                    String storedCredit = parts[2].trim();

                    double Credit = Double.parseDouble(storedCredit);

                    if (storedUsername.equals(user)) {
                        Credit = Credit + addCredit +addtotal;
                    }

                    line = storedUsername + ":" + storedPassword + ":" + Credit;
                }
                updatedFileContent.append(line).append("\n");
            }

            try (BufferedWriter creditWriter = new BufferedWriter(new FileWriter(creditFile))) {
                creditWriter.write(updatedFileContent.toString());
            }
        } catch (IOException e) {
            e.printStackTrace(); 
        }
    }
    
    
    /**
     * @param args the command line arguments
     */    /**
     * @param args the command line arguments
     */    
    
    
    /**
     * @param args the command line arguments
     */    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customer_OrderStatus_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customer_OrderStatus_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customer_OrderStatus_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer_OrderStatus_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            private String user;
            public void run() {
                new Customer_OrderStatus_History(user).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TBLDetail;
    private javax.swing.JTable TBLOrderHistory;
    private javax.swing.JTable TBLOrderStatus;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancelOrder;
    private javax.swing.JButton btnCancelOrder1;
    private javax.swing.JButton btnReorder;
    private javax.swing.JButton btnReview;
    private javax.swing.JButton btnViewDetail;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lbOrderStatus;
    private javax.swing.JLabel lbOrderStatus1;
    private java.awt.TextField txReview;
    // End of variables declaration//GEN-END:variables
}
