
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class HistoryForm extends javax.swing.JFrame {

    private DefaultTableModel model1 = new DefaultTableModel();
    private DefaultTableModel model2 = new DefaultTableModel();
    private DefaultTableModel model3 = new DefaultTableModel();
    
    private String[] columNameday = {"Customer ID", "Date", "Order ID", "Order Detail", "Total Price"};
    private String[] columNamemonth = {"Month", "Total Number of Order"};
    private String[] columNameyear = {"Quarter of the Year", "Total Number of Order"};
    List<Object> rowDataList = new ArrayList<>();
    
    private String vendorname;
    private String month;
    private String quarter;
    private String ordercount;
    
    private String customerid;
    private String date;
    private String orderid;
    private String orderdetail;
    private String totalprice;
    private String approve;
    
    private String vendor_name;
    private int order1, order2, order3, order4, order5, order6, order7, order8, order9, order10, order11, order12;
    
    int rowLength;
    
    private String filepath = "OrderHistoryVendor.txt";
    
    
    
    /**
     * Creates new form HistoryForm
     */
    public HistoryForm() {
        this.vendorname = vendorname;
        initComponents();
        model1.setColumnIdentifiers(columNameday);
        model2.setColumnIdentifiers(columNamemonth);
        model3.setColumnIdentifiers(columNameyear);
        lvendorname.setText(String.valueOf(vendorname));
        
    }
    
    public HistoryForm(String vendorname) {
        setTitle("History");
        this.setVisible(true);
        this.vendorname = vendorname;
        initComponents();
        model1.setColumnIdentifiers(columNameday);
        model2.setColumnIdentifiers(columNamemonth);
        model3.setColumnIdentifiers(columNameyear);
        lvendorname.setText(String.valueOf(vendorname));
        ReadFileDay();
        CurrentDate dc = new CurrentDate();
        String date = dc.getdate();
        ldate.setText(date);
        ReadFileMonth();
        ReadFileQuarter();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableDaily = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableMonth = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableQuartely = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lvendorname = new javax.swing.JLabel();
        breturn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ldate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TableDaily.setModel(model1);
        jScrollPane1.setViewportView(TableDaily);

        jTabbedPane1.addTab("Daily", jScrollPane1);

        TableMonth.setModel(model2);
        jScrollPane2.setViewportView(TableMonth);

        jTabbedPane1.addTab("Montly", jScrollPane2);

        TableQuartely.setModel(model3);
        jScrollPane3.setViewportView(TableQuartely);

        jTabbedPane1.addTab("Quarterly", jScrollPane3);

        jLabel1.setText("Vendor:");

        lvendorname.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N

        breturn.setText("Return to Main Page");
        breturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breturnActionPerformed(evt);
            }
        });

        jLabel2.setText("Date:");

        ldate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lvendorname, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 200, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(breturn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ldate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(breturn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lvendorname, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ldate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void breturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breturnActionPerformed
        MainMenuVendorForm vf = new MainMenuVendorForm(vendorname);
        vf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_breturnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistoryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistoryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistoryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistoryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HistoryForm().setVisible(true);
            }
        });
    }
    

    private void ReadFileDay(){
        String[] values = {customerid, date, orderid, orderdetail, totalprice};
        try{
            FileReader fr = new FileReader(filepath);
            BufferedReader br = new BufferedReader(fr);
            String line;
        while ((line = br.readLine()) != null) {
            String[] split_line = line.split(":");
            
            String customerid = split_line[0];
            String date = split_line[1];
            String orderid = split_line[2];
            String vendor_name = split_line[3];
            String orderdetail = split_line[4];
            String require_service = split_line[5];
            String delivery_fee = split_line[6];
            String totalprice = split_line[7];
            String[] rowDataList = new String[5]; 
            
            
            
            
            if(vendor_name.equals(vendorname)){
                rowDataList[0]=(customerid);
                rowDataList[1]=(date);
                rowDataList[2]=(orderid);
                rowDataList[3]=(orderdetail);
                rowDataList[4]=(totalprice);
                
                for (int i = 0; i < values.length; i = i + 5) {
                    Object[] row = {rowDataList[i], rowDataList[i + 1], rowDataList[i+2], rowDataList[i+3], rowDataList[i+4]};
                    model1.addRow(row);
                }
            }
            
        }   
        br.close();
    } catch (IOException e) {
        System.err.println("An error occurred while reading the file: " + e.getMessage());
    }
    }
    
    private void ReadFileMonth() {
        order1 = 0;
        order2 = 0;
        order3 = 0;
        order4 = 0;
        order5 = 0;
        order6 = 0;
        order7 = 0;
        order8 = 0;
        order9 = 0;
        order10 = 0;
        order11 = 0;
        order12 = 0;

        try {
            FileReader fr = new FileReader(filepath);
            BufferedReader br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
                String[] split_line = line.split(":");

                vendor_name = split_line[3];
                for (int i = 1; i < split_line.length; i++) {
                    
                    String[] values = split_line[i].trim().split("-");
                    if (values.length >= 2) {
                        String rowMonth = values[1].trim();
                        int month = Integer.parseInt(rowMonth);

                        if(vendor_name.equals(vendorname)){
                        switch (month) {
                            case 1:
                                order1++;
                                break;
                            case 2:
                                order2++;
                                break;
                            case 3:
                                order3++;
                                break;
                            case 4:
                                order4++;
                                break;
                            case 5:
                                order5++;
                                break;
                            case 6:
                                order6++;
                                break;
                            case 7:
                                order7++;
                                break;
                            case 8:
                                order8++;
                                break;
                            case 9:
                                order9++;
                                break;
                            case 10:
                                order10++;
                                break;
                            case 11:
                                order11++;
                                break;
                            case 12:
                                order12++;
                                break;
                            default:
                                break;
                        }                        
                        }
                    }
                }

                }
            
                rowDataList.add("January");
                rowDataList.add(order1);
                rowDataList.add("February");
                rowDataList.add(order2);
                rowDataList.add("March");
                rowDataList.add(order3);
                rowDataList.add("April");
                rowDataList.add(order4);
                rowDataList.add("May");
                rowDataList.add(order5);
                rowDataList.add("June");
                rowDataList.add(order6);
                rowDataList.add("July");
                rowDataList.add(order7);
                rowDataList.add("August");
                rowDataList.add(order8);
                rowDataList.add("September");
                rowDataList.add(order9);
                rowDataList.add("October");
                rowDataList.add(order10);
                rowDataList.add("November");
                rowDataList.add(order11);
                rowDataList.add("December");
                rowDataList.add(order12);
                for (int b = 0; b < rowDataList.size() ; b += 2) {
                    Object[] row = {rowDataList.get(b), rowDataList.get(b + 1)};
                    model2.addRow(row);
            }
        } catch (IOException e) {
            System.err.println("An error occurred while reading the file: " + e.getMessage());
        }
    }
    
        private void ReadFileQuarter() {
        order1 = 0;
        order2 = 0;
        order3 = 0;
        order4 = 0;

        try {
            FileReader fr = new FileReader(filepath);
            BufferedReader br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
                String[] split_line = line.split(":");
                vendor_name = split_line[3];

                for (int i = 1; i < split_line.length; i++) {
                    String[] values = split_line[i].trim().split("-");
                    if (values.length >= 2) {
                        String rowMonth = values[1].trim();
                        int quarte = Integer.parseInt(rowMonth);
                        if(vendor_name.equals(vendorname)){
                        if(quarte == 1 || quarte == 2 || quarte == 3){
                            order1++;
                        }
                        else if(quarte == 4 || quarte == 5 || quarte == 6){
                            order2++;
                        }
                        else if(quarte == 7 || quarte == 8 || quarte == 9){
                            order3++;
                        }
                        else if(quarte == 10 || quarte == 11 || quarte == 12){
                            order4++;
                        }                        
                        }

                    }
                }
            }
            List<Object> rowDataList = new ArrayList<>();
            rowDataList.add("Q1");
            rowDataList.add(order1);
            rowDataList.add("Q2");
            rowDataList.add(order2);
            rowDataList.add("Q3");
            rowDataList.add(order3);
            rowDataList.add("Q4");
            rowDataList.add(order4);
            for (int i = 0; i < rowDataList.size(); i += 2) {
                Object[] row = {rowDataList.get(i), rowDataList.get(i + 1)};
                model3.addRow(row);
            }
        } catch (IOException e) {
            System.err.println("An error occurred while reading the file: " + e.getMessage());
        }
    }
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableDaily;
    private javax.swing.JTable TableMonth;
    private javax.swing.JTable TableQuartely;
    private javax.swing.JButton breturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel ldate;
    private javax.swing.JLabel lvendorname;
    // End of variables declaration//GEN-END:variables
}
